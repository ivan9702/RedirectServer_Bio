#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('redirectserver:server');
var http = require('http');

const {BioserverId} = require('./../models/bioserverId');
const {UserFP} = require('./../models/userFP');

/**
 * Global variables.
 */

RedirectData = {
  lastUserId: 1,
  lastBSId: 1,
  AddFPServerIP: '',
  AddFPServerId: 0
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  var findLastBSId = BioserverId.find({}, null, {sort: {bsId: -1}, limit: 1});
  var findLastUserId = UserFP.find({}, null, {sort: {userId: -1}, limit: 1});

  Promise.all([findLastBSId, findLastUserId]).then((values) => {
    if (1 === values[0].length) {
      let lastBioserver = values[0][0];
      // update the lastBSId
      RedirectData.lastBSId = lastBioserver.bsId + 1;
      RedirectData.AddFPServerIP = lastBioserver.bsIP;
      RedirectData.AddFPServerId = lastBioserver.bsId;
      console.log('lastBSId: ' + RedirectData.lastBSId);
      console.log('AddFPServerIP: ' + RedirectData.AddFPServerIP);
      console.log('AddFPServerId: ' + RedirectData.AddFPServerId);
    }

    if (1 === values[1].length) {
      let lastUser = values[1][0];
      // update the lastUserId
      RedirectData.lastUserId = lastUser.userId + 1;
      console.log('lastUserId: ' + RedirectData.lastUserId);
    }
  }).catch((reason) => {
    console.log('Read DB error: ' + reason);
  });
}
