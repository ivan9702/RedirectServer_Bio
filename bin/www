#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('redirectserver:server');
var http = require('http');
const https = require('https');
const axios = require('axios');

const {BioserverId} = require('./../models/bioserverId');
const {UserFP} = require('./../models/userFP');
const {sslOptions} = require('./../sslLicense');
const {EventLog} = require('./../models/eventLog');
const {config} = require('./../readConfig');

/**
 * Global variables.
 */

RedirectData = {
  lastUserId: 1,
  lastBSId: 1,
  bioservers: []
};

BrowserInfo = {
  version: 'v2.0.0'
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create HTTPS server.
 */

const httpsServer = https.createServer(sslOptions, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const httpsPort = process.env.MYHTTPSPORT || 8443;
httpsServer.listen(httpsPort);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function setupBioserver() {
  let errorFlag = 0;
  try {
    const bioservers = await BioserverId.find({});
    errorFlag = 1;
    if (0 === bioservers.length) {
      errorFlag = 2;
      const agent = new https.Agent({rejectUnauthorized: false});
      const getServerInfoURL = config.defaultBioserverIP + '/api/getServerInfo';
      const response = await axios.get(getServerInfoURL, {httpsAgent: agent});
      errorFlag = 3;
      if (20005 === response.data.code) {
        const newBioserver = new BioserverId({
          bsIP: config.defaultBioserverIP,
          bsId: 1,
          count: 0,
          version: response.data.version,
          updated_at: new Date().toUTCString()
        });
        await newBioserver.save();
        RedirectData.bioservers.push({
          bsIP: config.defaultBioserverIP,
          bsId: 1,
          count: 0,
          version: response.data.version
        });
        RedirectData.lastBSId++;
      } else {
        throw new Error('res code error');
      }
    } else {
      bioservers.sort((a, b) => {
        return b.bsId - a.bsId;
      });
      RedirectData.lastBSId = bioservers[0].bsId + 1;
      console.log('lastBSId: ' + RedirectData.lastBSId);
      bioservers.forEach((bioserver) => {
        RedirectData.bioservers.push({
          bsIP: bioserver.bsIP,
          bsId: bioserver.bsId,
          count: bioserver.count,
          version: bioserver.version
        });
      });
      console.log('RedirectData.bioservers: ' + JSON.stringify(RedirectData.bioservers, null, 2));
      const lastUser = await UserFP.find({}, null, {sort: {userId: -1}, limit: 1});
      if (1 === lastUser.length) {
        RedirectData.lastUserId = lastUser[0].userId + 1;
        console.log('lastUserId: ' + RedirectData.lastUserId);
      }
    }
  } catch (e) {
    if ('res code error' === e.message) {
      console.log('response code error');
    } else if (2 === errorFlag) {
      console.log('Could not connect to the new Bioserver.');
      console.log(e.message);
    } else {
      console.log('May be Some Error on MongoDB.');
    }
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  setupBioserver();
}
